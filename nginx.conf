
user  arjun;
#user has to be set since nginx will start as root and try to read file belongs to another user
#ignore this if file is owned by www-data and nginx runs as www-data

worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;

#useful for debuging, disable in production
error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    keepalive_timeout  65;

    #include lua module for redis
    lua_package_path "/home/arjun/lua-nginx/lua-resty-redis-0.26/lib/?.lua;;";

    server {
        listen       80;
        server_name  localhost;



        location /assets {
          #make sure that this location can be accessed internally, directly hitting this endpoint will result in a 404
          internal;

          root /home/arjun/;
          #autoindex on;

          #https://www.nginx.com/resources/admin-guide/serving-static-content/
          sendfile on; #pass the content between file descriptor, dont use nginx buffers
          sendfile_max_chunk 10m;
          tcp_nopush on;
          # try Enabling tcp_nodelay
        }

        location ~ /query/([a-z]*) {
          #content_by_lua_block is used when we wnat to output something as response
          content_by_lua_block {
            key = ngx.var[1]
            local redis = require "resty.redis"
            local red = redis:new()
            red:set_timeout(1000)

            local ok, err = red:connect("127.0.0.1", 6379)
            if not ok then
              ngx.log(ngx.ERR, "failed to connect to redis: ", err)
              return ngx.exit(500)
            end

            local res, err = red:get(key)
            if not res then
              ngx.log(ngx.ERR, "failed to get key from redis: ", err)
              return ngx.exit(500)
            end

            if res == ngx.null then
              return ngx.exit(404)
            end

            #print out the value we got from redis
            ngx.say(res)
          }
        }

        location ~ /file/([a-z]*) {
          # rewrite_by_lua_block is used when we want to redirect from lua
          rewrite_by_lua_block {
            key = ngx.var[1]
            local redis = require "resty.redis"
            local red = redis:new()
            red:set_timeout(1000)

            local ok, err = red:connect("127.0.0.1", 6379)
            if not ok then
              ngx.log(ngx.ERR, "failed to connect to redis: ", err)
              return ngx.exit(500)
            end

            local res, err = red:get(key)
            if not res then
              ngx.log(ngx.ERR, "failed to get key from redis: ", err)
              return ngx.exit(500)
            end

            if res == ngx.null then
              return ngx.exit(404)
            end

            #http://openresty-reference.readthedocs.io/en/latest/Lua_Nginx_API/#ngxreqset_uri
            #redirect to the value path
            ngx.req.set_uri(res, true)
          }
        }


        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
